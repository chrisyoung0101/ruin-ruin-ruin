cart-view.ejs :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shopping Cart</title>
</head>
<body>
    <h1>Your Shopping Cart</h1>
    <% if (cart.items.length === 0) { %>
        <p>Your cart is empty.</p>
    <% } else { %>
        <ul>
            <% cart.items.forEach(item => { %>
                <li>
                    <%= item.product.name %> - Quantity: <%= item.quantity %>
                    - $<%= item.product.price * item.quantity %>
                </li>
            <% }); %>
        </ul>
    <% } %>
    <a href="/products">Continue Shopping</a>
</body>
</html>

login.ejs : 

<form action="/login" method="post">
    <div>
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
    </div>
    <div>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <div>
        <button type="submit">Login</button>
    </div>
</form>


product-detail.ejs : 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= product.name %></title>
</head>
<body>
    <h1><%= product.name %></h1>
    <img src="<%= product.imageUrl %>" alt="<%= product.name %>" style="width:200px;">
    <p>Description: <%= product.description %></p>
    <p>Price: $<%= product.price %></p>
    <p>Category: <%= product.category %></p>

    <!-- Form to add product to cart -->
    <form action="/add-to-cart" method="post">
        <input type="hidden" name="productId" value="<%= product._id %>">
        <label for="quantity">Quantity:</label>
        <input type="number" id="quantity" name="quantity" value="1" min="1">
        <button type="submit">Add to Cart</button>
    </form>

    <a href="/products">Back to Products</a>
</body>
</html>


product-list.ejs : 

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Listing</title>
</head>
<body>
    <h1>Product Listing</h1>
    <ul>
        <% products.forEach(product => { %>
            <li>
                <h2><a href="/products/<%= product._id %>"><%= product.name %></a></h2>
                <p><%= product.description %></p>
                <p>Price: $<%= product.price %></p>
                <img src="<%= product.imageUrl %>" alt="<%= product.name %>" style="width:100px;">
            </li>
        <% }); %>
    </ul>
</body>
</html>



registration.ejs : 

<form action="/register" method="post">
    <div>
        <label for="username">Username:</label>
        <input type="text" id="username" name="username" required>
    </div>
    <div>
        <label for="password">Password:</label>
        <input type="password" id="password" name="password" required>
    </div>
    <div>
        <button type="submit">Register</button>
    </div>
</form>


index.js : 


import express from 'express';
import mongoose from 'mongoose';
import passport from 'passport';
import session from 'express-session';
import LocalStrategy from 'passport-local';
import bcrypt from 'bcryptjs';
import path from 'path';
import { fileURLToPath } from 'url';

const app = express();
const port = 3000;

// Convert the file URL to a path
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Set the view engine to ejs
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Middleware to parse JSON and URL-encoded bodies
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Setup session management
app.use(session({
    secret: 'secret',
    resave: false,
    saveUninitialized: false
}));
app.use(passport.initialize());
app.use(passport.session());

// User schema and model
const userSchema = new mongoose.Schema({
    username: { type: String, unique: true, required: true },
    password: { type: String, required: true }
});
const User = mongoose.model('User', userSchema);

// Passport Local Strategy
passport.use(new LocalStrategy((username, password, done) => {
    User.findOne({ username: username }, (err, user) => {
        if (err) return done(err);
        if (!user) return done(null, false, { message: 'Incorrect username.' });

        bcrypt.compare(password, user.password, (err, res) => {
            if (res) {
                return done(null, user);
            } else {
                return done(null, false, { message: 'Incorrect password.' });
            }
        });
    });
}));

passport.serializeUser((user, done) => done(null, user.id));

passport.deserializeUser((id, done) => {
    User.findById(id, (err, user) => {
        done(err, user);
    });
});

// Establish a connection to MongoDB
mongoose.connect('mongodb://localhost:27017/myDatabase')
    .then(() => console.log('MongoDB connected successfully.'))
    .catch(err => console.error('MongoDB connection error:', err));

// Define a Mongoose schema and model for products
const productSchema = new mongoose.Schema({
    name: String, description: String, price: Number, category: String, imageUrl: String
});
const Product = mongoose.model('Product', productSchema);

// Define a Mongoose schema and model for shopping carts
const cartItemSchema = new mongoose.Schema({
    product: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    quantity: { type: Number, required: true, min: 1, default: 1 }
});
const shoppingCartSchema = new mongoose.Schema({
    items: [cartItemSchema], session: String, createdAt: { type: Date, default: Date.now, expires: 3600 }
});
const ShoppingCart = mongoose.model('ShoppingCart', shoppingCartSchema);

// User Registration
app.post('/register', async (req, res) => {
    try {
        const hashedPassword = await bcrypt.hash(req.body.password, 10);
        const newUser = new User({ username: req.body.username, password: hashedPassword });
        await newUser.save();
        res.redirect('/login');
    } catch {
        res.redirect('/register');
    }
});

// User Login
app.post('/login', passport.authenticate('local', {
    successRedirect: '/',
    failureRedirect: '/login',
    failureFlash: true
}));

// User logout
app.get('/logout', (req, res) => {
    req.logout(() => {
        res.redirect('/');
    });
});

// Product Routes
app.post('/add-product', async (req, res) => {
    try {
        const newProduct = await Product.create(req.body);
        res.status(201).send(newProduct);
    } catch (error) {
        console.error('Error adding product:', error);
        res.status(500).send('Failed to add product');
    }
});

app.get('/products', async (req, res) => {
    try {
        const products = await Product.find();
        res.render('product-list', { products });
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).send('Failed to retrieve products');
    }
});

app.get('/products/:id', async (req, res) => {
    try {
        const product = await Product.findById(req.params.id);
        if (product) {
            res.render('product-detail', { product });
        } else {
            res.status(404).send('Product not found');
        }
    } catch (error) {
        console.error('Error fetching product:', error);
        res.status(500).send('Failed to retrieve product');
    }
});

// Shopping Cart Routes
app.post('/add-to-cart', async (req, res) => {
    const { productId, quantity } = req.body;
    const session = req.headers['session-id']; 
    if (!session) {
        return res.status(400).send('Session ID is required');
    }
    try {
        let cart = await ShoppingCart.findOne({ session });
        if (!cart) {
            cart = new ShoppingCart({ session, items: [] });
        }
        const productIndex = cart.items.findIndex(item => item.product.toString() === productId);
        if (productIndex > -1) {
            cart.items[productIndex].quantity += quantity;
        } else {
            cart.items.push({ product: productId, quantity });
        }
        await cart.save();
        res.status(201).send(cart);
    } catch (error) {
        console.error('Error adding to cart:', error);
        res.status(500).send('Failed to add to cart');
    }
});

app.get('/cart', async (req, res) => {
    const session = req.headers['session-id'];
    if (!session) {
        return res.status(400).send('Session ID is required');
    }
    try {
        const cart = await ShoppingCart.findOne({ session }).populate('items.product');
        if (!cart) {
            return res.status(404).send('Cart not found');
        }
        res.render('cart-view', { cart });
    } catch (error) {
        console.error('Error retrieving cart:', error);
        res.status(500).send('Failed to retrieve cart');
    }
});

// Database Stats Route
app.get('/db-stats', async (req, res) => {
    try {
        const stats = await mongoose.connection.db.command({ dbStats: 1 });
        res.status(200).json(stats);
    } catch (error) {
        console.error('Error retrieving database stats:', error);
        res.status(500).send('Failed to retrieve database stats');
    }
});

// Start the Express server
app.listen(port, () => {
    console.log(`Server running at http://localhost:${port}`);
});



